@startuml

' Title
title GeoWorldHotelSearch Project Architecture

actor User as "User/Browser"

' Components
component "wwwroot/ (CSS, JS, images)" as StaticAssets
component "Views (Razor) [Views/Hotels/Index.cshtml, Views/Home/Index.cshtml, ...]" as View
component "SharedLayout" as SharedLayout
component "Controllers [HotelsController.cs, HomeController.cs, ...]" as Controller
component "appsettings.json" as AppSettings
component "Services [HotelService.cs, IHotelService.cs, ...]" as Service
component "Models (Hotel.cs, Booking.cs, ...)" as Models
component "Repositories [HotelRepository.cs, IHotelRepository.cs, ...]" as Repository
component "AppDbContext.cs" as AppDbContext
component "Migrations/*.cs" as Migrations
component "Database (SQL Server, PostgreSQL, etc)" as Database

' User interactions
User --> View : Step 1: Interacts (form, click, etc)
User --> StaticAssets : Step 2: Loads static assets

' Views and shared layout
View ..> SharedLayout : Uses layout
View --> Controller : Step 3: Sends HTTP request (GET/POST)

' Controllers
Controller ..> AppSettings : Reads config
Controller --> Service : Step 4: Calls business logic (e.g., Search, Book)

' Services
Service ..> Models : Uses models
Service --> Repository : Step 5: Requests data access (CRUD, queries)

' Repositories
Repository --> AppDbContext : Step 6: Uses EF Core context

' Data context and migrations
AppDbContext ..> AppSettings : Uses connection string
AppDbContext --> Migrations : Applies schema changes
Migrations --> Database : Updates schema

' Database
AppDbContext --> Database : Step 7: Reads/writes data
Database --> AppDbContext : Step 8: Returns data

' Return arrows for clarity
AppDbContext --> Repository : Step 9: Entities
Repository --> Service : Step 10: Data/DTOs
Service --> Controller : Step 11: ViewModels
Controller --> View : Step 12: Model for rendering
View --> User : Step 13: Rendered HTML

' Additional notes
note right of User
- Interacts via browser
- Receives HTML, CSS, JS
- Submits forms, clicks links
end note

note right of View
- Renders UI using Razor
- Uses shared layout (_Layout.cshtml)
- Receives models from controllers
end note

note right of Controller
- Handles HTTP requests
- Validates input
- Calls services
- Returns views or redirects
end note

note right of Service
- Contains business logic
- Orchestrates data access
- Maps entities to view models
end note

note right of Repository
- Abstracts database access
- Implements CRUD/query logic
end note

note right of AppDbContext
- Entity Framework Core context
- Manages entity sets
- Handles migrations
end note

note right of Migrations
- Auto-generated by EF Core
- Track schema changes
end note

note right of Database
- Stores all persistent data
- Updated via migrations
end note

@enduml
